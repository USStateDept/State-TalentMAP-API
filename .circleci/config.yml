version: 2.0

default-python-node: &default-python-node
  image: circleci/python:3.6.1
  environment:
    CC_TEST_REPORTER_ID: b267008efa014a2c3a1ed266efebeb68bad762a948a54a443b4de581a92c45b0
    COMPOSE_FILE_NAME: circleci-docker-compose.yml
    DJANGO_SECRET_KEY: ci_secret_key
default-postgres-node: &default-postgres-node
  image: circleci/postgres:9.6.2
  environment:
    POSTGRES_USER: root
    POSTGRES_DB: circle_test
jobs:
  build:
    docker:
      - *default-python-node
      - *default-postgres-node
    steps:
      - checkout
      - restore_cache:
          key: deps2-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          key: deps2-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
  bandit:
    docker:
      - *default-python-node
    steps:
      - checkout
      - restore_cache:
          key: deps2-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - run:
          command: |
            . venv/bin/activate
            bandit -f txt -o bandit_results.txt -r .
      - store_artifacts:
          path: bandit_results.txt
          destination: bandit/bandit_results.txt
  pytest:
    docker:
      - *default-python-node
      - *default-postgres-node
    steps:
      - checkout
      - run: curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      - run: chmod +x ./cc-test-reporter
      - run: ./cc-test-reporter before-build
      - restore_cache:
          key: deps2-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - run:
          name: Python Test Coverage
          command: |
            . venv/bin/activate
            pytest --cov=. --cov-report xml:./coverage.xml
          environment:
            DATABASE_URL: postgresql://root:@127.0.0.1:5432/circle_test
            DJANGO_LOG_DIRECTORY: ./
      - run: ./cc-test-reporter after-build -t coverage.py --exit-code $?
      - store_artifacts:
          path: coverage.xml
          destination: pytest-cov/coverage.xml
  zap:
    docker:
      - *default-python-node
    steps:
      - checkout
      - run: chmod +x wait-for-postgres.sh
      - run:
          name: Initialize Dummy Data Container
          command: |
            docker-compose -f $COMPOSE_FILE_NAME create data
            docker cp . data:/app
      - run:
          name: Migrate DB
          command: |
            docker-compose -f $COMPOSE_FILE_NAME \
              run app bash -c \
              "./wait-for-postgres.sh db && python manage.py migrate"
      - run:
          name: Start Server
          command: docker-compose -f $COMPOSE_FILE_NAME up -d
      - run:
          name: Run ZAP
          command: |
            docker run --name zap --network container:app \
              -v /zap/wrk/ \
              -t owasp/zap2docker-weekly \
              zap-api-scan.py -d -f openapi \
                -t http://app:8000/?format=openapi \
                -w "zap_results.md" \
                -z "-Xmx4g"
      - run:
          name: Pull results from container
          command: docker cp zap:/zap/wrk/zap_results.md zap_results.md
      - store_artifacts:
          path: zap_results.md
          destination: zap/zap_results.md        
workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - bandit:
          requires:
            - build
      - pytest:
          requires:
            - build
      - zap:
          filters:
            tags:
              only: /^zap.*/
            branches:
              ignore: /.*/
